#include <stdio.h> 
#define MAX_VERTICES 100 
#define INF 999 
int primApproach(int a[MAX_VERTICES][MAX_VERTICES], int n, int source) { 
    int s[MAX_VERTICES] = {0}; 
    int d[MAX_VERTICES]; 
    int u, v, min, sum = 0; 
    for (int i = 0; i < n; i++) { 
        d[i] = a[source][i]; 
    } 
    s[source] = 1; 
    for (int i = 0; i < n - 1; i++) { 
        min = INF; 
        for (int j = 0; j < n; j++) { 
            if (s[j] == 0 && d[j] < min) { 
                min = d[j]; 
                u = j; 
            } 
        } 
        s[u] = 1; 
        sum += d[u]; 
 
        for (v = 0; v < n; v++) { 
            if (s[v] == 0 && d[v] > a[u][v]) { 
                d[v] = a[u][v]; 
            } 
        } 
    } 
    return sum; 
} 
 
int main() { 
    int i, j, n; 
    printf ("Enter the number of vertices: "); 
    scanf("%d", &n); 
    int a[MAX_VERTICES][MAX_VERTICES]; 
    printf ("Enter the weighted graph in form of adjacency matrix:\n"); 
    for (i = 0; i < n; i++) { 
        for (j = 0; j < n; j++) 
            scanf("%d", &a[i][j]); 
    } 
    printf ("\nMatrix:\n"); 
    for (i = 0; i < n; i++) { 
        for (j = 0; j < n; j++) 
            printf ("%d\t", a[i][j]); 
        printf ("\n"); 
    } 
    int source; 
    printf ("\nEnter the source vertex: "); 
    scanf("%d", &source); 
    int minimumCost = primApproach(a, n, source); 
    printf ("Minimum cost of the spanning tree is %d units\n", minimumCost); 
    return 0; 
} 